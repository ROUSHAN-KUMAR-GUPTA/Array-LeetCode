class Solution {
    public  double DFS(String src,String target,HashSet<String> visited ,double pro,HashMap<String,HashMap<String,Double>> map){
         double ret=-1;
         visited.add(src);
         if(map.get(src).containsKey(target)){
            ret=map.get(src).get(target)*pro;
         }else{
            for(String neigh:map.get(src).keySet()){  
                if(!visited.contains(neigh)){ 
                    pro=pro*map.get(src).get(neigh); 
                   ret= DFS(neigh,target,visited,pro,map);
                    if(ret!=-1){
                        break; 
                    }
                    pro=pro/map.get(src).get(neigh);
                }
            }
         }
         visited.remove(src);
         return ret;
    }
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        //adj map
        HashMap<String ,HashMap<String,Double>> map=new HashMap<>();
        for(int i=0;i<equations.size();i++){
            String divident=equations.get(i).get(0);
            String divisor=equations.get(i).get(1);
            if(!map.containsKey(divident)){
                map.put(divident,new HashMap<>());
            }
            if(!map.containsKey(divisor)){
                map.put(divisor,new HashMap<>());
            }
            double val=values[i];
            map.get(divident).put(divisor,val);
            map.get(divisor).put(divident,1/val);
        }
        double res[]=new double[queries.size()];
        for(int i=0;i<queries.size();i++){
            String divident=queries.get(i).get(0);
            String divisor=queries.get(i).get(1);
           
            if(!map.containsKey(divident) || !map.containsKey(divisor)){
                res[i]=-1.0;
            }else if(divident.equals(divisor)){
                res[i]=1.0;
            }else{
                 HashSet<String> visited=new HashSet<>();
                res[i]=DFS(divident,divisor,visited,1,map);
            }
        }
        return res;
    }
}
