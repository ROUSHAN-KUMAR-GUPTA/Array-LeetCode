class Solution {
    static class freqElements implements Comparable<freqElements>{
        int idx;
        int freq;
        public freqElements(int idx, int freq){
            this.idx = idx;
            this.freq = freq;
        }   
        @Override 
        public int compareTo(freqElements f2){
            return this.freq - f2.freq; 
        } 
    }

    public int[] topKFrequent(int[] nums, int k) {
       
        int minVal = Integer.MAX_VALUE;
        int maxVal = Integer.MIN_VALUE;
        for (int num : nums) {
            if (num < minVal) {
                minVal = num;
            }
            if (num > maxVal) {
                maxVal = num;
            }
        }

        
        int offset = -minVal; 
        int freq[] = new int[maxVal - minVal + 1];
        for (int i = 0; i < nums.length; i++) {
            int idx = nums[i] + offset; 
            freq[idx]++;
        }

  
        PriorityQueue<freqElements> pq = new PriorityQueue<>(Comparator.reverseOrder());
        for (int p = 0; p < freq.length; p++) {
            if (freq[p] != 0) {
                pq.add(new freqElements(p - offset, freq[p]));
            }
        }

   
        int brr[] = new int[k];
        for (int l = 0; l < k; l++) {
            brr[l] = pq.remove().idx;
        }

        return brr;
    }
}
